{"version":3,"sources":["Categories.js","btn.js","App.js","serviceWorker.js","index.js"],"names":["games","name","url","food","movies","Btn","value","onClick","className","defaultProps","App","useState","category","setCategory","result","setResult","loaded","setLoaded","useEffect","id","Object","keys","Categories","map","e","handleCategory","key","selectedCategory","randomIndex","Math","floor","random","length","console","log","disabled","onLoad","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAAe,G,MAAA,CACXA,MAAO,CACH,CACIC,KAAM,aACNC,IAAK,2HAET,CACID,KAAM,MACNC,IAAK,6EAET,CACID,KAAM,SACNC,IAAK,8EAET,CACID,KAAM,YACNC,IAAK,mKAET,CACID,KAAM,WACNC,IAAK,gFAGbC,KAAM,CACF,CACIF,KAAM,UACNC,IAAK,iEAET,CACID,KAAM,QACNC,IAAK,+EAET,CACID,KAAM,SACNC,IAAK,yGAET,CACID,KAAM,WACNC,IAAK,wDAET,CACID,KAAM,oBACNC,IAAK,kFAET,CACID,KAAM,kBACNC,IAAK,iKAET,CACID,KAAM,WACNC,IAAK,4FAET,CACID,KAAM,YACNC,IAAK,qGAKbE,OAAQ,CACJ,CACIH,KAAM,WACNC,IAAK,yEC1DXG,G,MAAM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAClB,OACI,6BACI,4BAAQA,QAASA,EAASC,UAAU,UAC/BF,MAWjBD,EAAII,aAAe,GAGJJ,Q,MCyCAK,MAvDf,WAAgB,IAAD,EACmBC,mBAAS,SAD5B,mBACNC,EADM,KACIC,EADJ,OAEeF,mBAAS,MAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGeJ,oBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAqBb,OAhBAC,qBAAU,WACRL,EAAYD,KACX,CAACA,IAeF,yBAAKJ,UAAU,OACb,yBAAKW,GAAG,wBACLC,OAAOC,KAAKC,GAAYC,KAAI,SAAAC,GAAC,OAC5B,0BAAMjB,QAAS,YAhBA,SAAAiB,GACrBX,EAAYW,GAeiBC,CAAeD,IAAME,IAAKF,EAAGhB,UAAWI,IAAaY,EAAI,aAAe,OAA/F,IAAwGA,OAK5G,kBAAC,EAAD,CAAKlB,MAAM,WAAWC,QAjBJ,WACpBU,GAAU,GACV,IAAIU,EAAmBL,EAAWV,GAC9BgB,EAAcC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMH,EAAiBK,SACzEC,QAAQC,IAAIP,EAAiBC,IAC7Bb,EAAUY,EAAiBC,IAC3BX,GAAU,IAWsCkB,SAAUnB,IACvDF,GAAUE,EAEP,yBAAKR,UAAU,UACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,4BAAI,2BAAIM,EAAOb,QAGjB,yBAEEmC,OAAQ,WAAOH,QAAQC,IAAI,OAAOjB,GAAU,IAC5CoB,IAAKvB,EAAOZ,IAAKoC,IAAKxB,EAAOb,SAKnC,OC3CUsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.2bcb66f5.chunk.js","sourcesContent":["export default {\n    games: [\n        {\n            name: \"God of War\",\n            url: \"https://psmedia.playstation.com/is/image/psmedia/god-of-war-narrative-screen-04-ps4-eu-23jan18?$MediaCarousel_Original$\"\n        },\n        {\n            name: \"Uno\",\n            url: \"https://steamcdn-a.akamaihd.net/steam/apps/470220/header.jpg?t=1573768701\"\n        },\n        {\n            name: \"Puzzle\",\n            url: \"https://www.printworksmarket.com/thumb/2905/1024x0/pussel_dusk_closeup.jpg\"\n        },\n        {\n            name: \"Connect 4\",\n            url: \"https://ae01.alicdn.com/kf/HTB1B_mUX4rvK1RjSszeq6yObFXaa/Connect-4-Game-Foldable-Montessoro-Educational-Kids-Math-Toys-for-Children-Line-Up-Row-Board-Funny.jpg\"\n        },\n        {\n            name: \"Monopoly\",\n            url: \"https://images-na.ssl-images-amazon.com/images/I/81m0JAjUbbL._AC_SX679_.jpg\"\n        },\n    ],\n    food: [\n        {\n            name: \"Lazania\",\n            url: \"https://kfoods.com/images1/newrecipeicon/Beef-Lazania_322.jpg\"\n        },\n        {\n            name: \"Pizza\",\n            url: \"https://www.pishi.co.ke/wp-content/uploads/2020/02/pizza_categoryheader.png\"\n        },\n        {\n            name: \"Burgar\",\n            url: \"https://www.freshstore.pk//Content/Products/ProductImages/13960/Karizma-burgar-with-coke-&-fries1.jpg\"\n        },\n        {\n            name: \"Shawarma\",\n            url: \"https://www.ndtv.com/cooks/images/shawarma%20new.jpg\"\n        },\n        {\n            name: \"Pasta white sauce\",\n            url: \"https://all-recipes.us/wp-content/uploads/2019/04/White-Sauce-Pasta-Recipe.jpg\"\n        },\n        {\n            name: \"Pasta red sauce\",\n            url: \"https://assets.myfoodandfamily.com/adaptivemedia/rendition/206197_3000x2000.jpg?id=03735121263a1d9cceac4325dc79a75212491fd8&ht=650&wd=1004&version=1&clid=pim\"\n        },\n        {\n            name: \"Sea food\",\n            url: \"https://media-cdn.tripadvisor.com/media/photo-s/18/3a/09/6c/bonefish-seafood-platter.jpg\"\n        },\n        {\n            name: \"Mix Grill\",\n            url: \"https://s3-eu-west-1.amazonaws.com/elmenusv5-stg/Normal/84fdb439-8072-4b08-9697-eb3f9bbc7196.jpg\"\n        }\n\n\n    ],\n    movies: [\n        {\n            name: \"Iron Man\",\n            url: \"https://upload.wikimedia.org/wikipedia/en/0/00/Iron_Man_poster.jpg\"\n        }\n    ]\n}\n","import React from 'react'; \nimport PropTypes from 'prop-types';\nimport './btn.css';\n\nconst Btn = ({ value, onClick }) => {\n    return (\n        <div>\n            <button onClick={onClick} className=\"button\">\n                {value}\n            </button>\n        </div>\n    );\n};\n\nBtn.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n};\n\nBtn.defaultProps = {\n};\n\nexport default Btn;","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Categories from './Categories';\n\nimport Btn from './btn';\nimport './tag.css'\n\nfunction App() {\n  const [category, setCategory] = useState(\"games\");\n  const [result, setResult] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    setCategory(category)\n  }, [category])\n\n  const handleCategory = e => {\n    setCategory(e);\n  }\n\n  const handleClickMe = () => {\n    setLoaded(false);\n    let selectedCategory = Categories[category];\n    let randomIndex = Math.floor(Math.random() * Math.floor(selectedCategory.length));\n    console.log(selectedCategory[randomIndex]);\n    setResult(selectedCategory[randomIndex])\n    setLoaded(true);\n  }\n  return (\n    <div className=\"App\">\n      <div id=\"categories-container\">\n        {Object.keys(Categories).map(e => (\n          <span onClick={() => { handleCategory(e) }} key={e} className={category === e ? \"tag active\" : \"tag\"}> {e}</span>\n        )\n        )}\n      </div>\n\n      <Btn value=\"Click Me\" onClick={handleClickMe} disabled={loaded} />\n      {result && loaded ?\n        (\n          <div className=\"result\">\n            <div className=\"card\">\n              <div className=\"container\">\n                <h4><b>{result.name}</b></h4>\n              </div>\n   \n              <img\n                // style={setLoaded ? {} : { display: 'none' }}\n                onLoad={() => {console.log(\"WTF\");setLoaded(true)}}\n                src={result.url} alt={result.name} />\n\n            </div>\n          </div>\n        )\n        : null\n      }\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}