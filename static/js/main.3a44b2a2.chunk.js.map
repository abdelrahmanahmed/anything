{"version":3,"sources":["components/Btn.js","App.js","helpers.js","serviceWorker.js","index.js"],"names":["Btn","value","onClick","otherProps","className","defaultProps","App","useState","categories","setCategories","category","setCategory","result","setResult","isLoading","setIsLoading","useEffect","Categories","id","Object","keys","map","e","handleCategory","key","label","emoji","selectedCategory","list","currentCategory","output","randomIndex","Math","floor","random","length","JSON","stringify","getRandomCategory","disabled","name","style","display","onLoad","src","url","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"svEAIMA,G,MAAM,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAAYC,EAAiB,mCAC/C,OACI,6BACI,0CAAQD,QAASA,EAASE,UAAU,UAAYD,GAC3CF,MAWjBD,EAAIK,aAAe,GAGJL,Q,YC6CAM,MA1Df,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEmBF,mBAAS,SAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGeJ,mBAAS,MAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIqBN,oBAAS,GAJ9B,mBAINO,EAJM,KAIKC,EAJL,KAwBb,OAjBAC,qBAAU,WACRP,EAAcQ,KACb,IAEHD,qBAAU,WACRL,EAAYD,KACX,CAACA,IAYF,yBAAKN,UAAU,OACb,wBAAIc,GAAG,SAAP,+CACA,yBAAKA,GAAG,wBACLC,OAAOC,KAAKZ,GAAYa,KAAI,SAAAC,GAAC,OAC5B,0BAAMpB,QAAS,YAdA,SAAAoB,GACrBX,EAAYW,GAaiBC,CAAeD,IAAME,IAAKF,EAAGlB,UAAWM,IAAaY,EAAI,aAAe,OAC5Fd,EAAWc,GAAGG,MADjB,IACyBjB,EAAWc,GAAGI,WAM3C,kBAAC,EAAD,CAAKzB,MAAOa,EAAY,aAAe,WAAYZ,QAjBjC,WACpBa,GAAa,GACb,IAAIY,EAAmBnB,EAAWE,GAAUkB,KAC5Cf,EC/BsB,SAACc,EAAkBE,GAGzC,IAFA,IAAIC,EACAC,IAGA,GADAA,EAAcC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,EAAiBQ,SACjEC,KAAKC,UAAUV,EAAiBI,MAAkBK,KAAKC,UAAUR,GAAkB,CACnFC,EAASH,EAAiBI,GAC1B,MAGR,OAAOD,EDqBGQ,CAAkBX,EAAkBf,KAc+B2B,SAAUzB,IACpFF,EACC,yBAAKR,UAAU,UACb,yBAAKA,UAAU,QACZU,EAAY,yBAAKV,UAAU,kBAC1B,yBAAKA,UAAU,aACb,4BAAI,2BAAIQ,EAAO4B,QAInB,yBACEC,MAAO3B,EAAY,CAAE4B,QAAS,QAAW,GACzCC,OAAQ,WAAQ5B,GAAa,IAC7B6B,IAAKhC,EAAOiC,IAAKC,IAAKlC,EAAO4B,SAIjC,OElDUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a44b2a2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Btn.css';\n\nconst Btn = ({ value, onClick, ...otherProps }) => {\n    return (\n        <div>\n            <button onClick={onClick} className=\"button\"{...otherProps}>\n                {value}\n            </button>\n        </div>\n    );\n};\n\nBtn.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n};\n\nBtn.defaultProps = {\n};\n\nexport default Btn;","import React, { useState, useEffect } from 'react';\nimport Categories from './data/Categories.json';\nimport Btn from './components/Btn';\nimport { getRandomCategory } from './helpers';\n\n\nimport './styles/App.css';\nimport './styles/Tag.css';\n\nfunction App() {\n  const [categories, setCategories] = useState({});\n  const [category, setCategory] = useState(\"games\");\n  const [result, setResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fetch Categories data on component initialization\n  useEffect(() => {\n    setCategories(Categories);\n  }, []);\n\n  useEffect(() => {\n    setCategory(category)\n  }, [category])\n\n  const handleCategory = e => {\n    setCategory(e);\n  }\n\n  const handleClickMe = () => {\n    setIsLoading(true);\n    let selectedCategory = categories[category].list;\n    setResult(getRandomCategory(selectedCategory, result))\n  }\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">Bored? &#128580; see what you can do now</h1>\n      <div id=\"categories-container\">\n        {Object.keys(categories).map(e => (\n          <span onClick={() => { handleCategory(e) }} key={e} className={category === e ? \"tag active\" : \"tag\"}>\n            {categories[e].label} {categories[e].emoji}\n          </span>\n        )\n        )}\n      </div>\n\n      <Btn value={isLoading ? \"Loading...\" : \"Click Me\"} onClick={handleClickMe} disabled={isLoading} />\n      {result ?\n        <div className=\"result\">\n          <div className=\"card\">\n            {isLoading ? <div className=\"lds-hourglass\"></div> :\n              <div className=\"container\">\n                <h4><b>{result.name}</b></h4>\n              </div>\n            }\n\n            <img\n              style={isLoading ? { display: 'none' } : {}}\n              onLoad={() => { setIsLoading(false) }}\n              src={result.url} alt={result.name} />\n          </div>\n\n        </div>\n        : null}\n    </div>\n  );\n}\n\nexport default App;\n","const getRandomCategory = (selectedCategory, currentCategory) => {\n    let output;\n    let randomIndex;\n    while (true) {\n        randomIndex = Math.floor(Math.random() * Math.floor(selectedCategory.length));\n        if (JSON.stringify(selectedCategory[randomIndex]) !== JSON.stringify(currentCategory)) {\n            output = selectedCategory[randomIndex];\n            break;\n        }\n    }\n    return output;\n}\n\nexport {\n    getRandomCategory\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/Index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}